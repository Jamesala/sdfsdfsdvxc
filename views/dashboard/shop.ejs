
<!DOCTYPE html>
<html lang="pl" class="dark-mode">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Zarządzanie Sklepami | Discord Bot List</title>
  <%- include('../partials/head.ejs') %>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    .stat-card {
      border-radius: 12px;
      border: none;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      transition: all 0.3s ease;
      overflow: hidden;
      background: rgba(255,255,255,0.03);
    }
    
    .stat-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .status-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 0.375rem;
      font-size: 0.75rem;
      font-weight: 600;
    }
    
    .status-completed { background-color: rgba(34, 197, 94, 0.2); color: #22c55e; }
    .status-pending { background-color: rgba(251, 191, 36, 0.2); color: #fbbf24; }
    .status-failed { background-color: rgba(239, 68, 68, 0.2); color: #ef4444; }
    .status-cancelled { background-color: rgba(107, 114, 128, 0.2); color: #6b7280; }
    
    .revenue-input {
      width: 120px;
      padding: 0.25rem 0.5rem;
      border: 1px solid #374151;
      border-radius: 0.375rem;
      background: #1f2937;
      color: white;
    }
    
    .action-btn {
      padding: 0.25rem 0.5rem;
      border: none;
      border-radius: 0.375rem;
      font-size: 0.75rem;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .btn-success { background-color: #22c55e; color: white; }
    .btn-warning { background-color: #f59e0b; color: white; }
    .btn-danger { background-color: #ef4444; color: white; }
    .btn-secondary { background-color: #6b7280; color: white; }
    
    .action-btn:hover {
      transform: scale(1.05);
      opacity: 0.9;
    }
  </style>
</head>

<body class="bg-dark text-light">
  <%- include('./partials/header.ejs') %>
  <%- include('./partials/aside.ejs') %>

  <main class="docs-container pt-5 pb-3 pb-lg-4" style="padding-right: 0;">
    <div class="container-fluid px-xxl-5 px-lg-4 pt-4 pt-lg-5 pb-4">
      <!-- Page Header -->
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="ps-lg-2 ps-xxl-0 mt-2 mt-lg-0 pt-4 pb-2 mb-3 mb-xl-4">
          <i class="fas fa-shopping-cart me-3"></i>Zarządzanie Sklepami Serwerów
        </h1>
      </div>

      <!-- Statistics Cards -->
      <div class="row mb-4">
        <div class="col-md-3">
          <div class="stat-card p-3 text-center">
            <div class="text-primary mb-2"><i class="fas fa-shopping-bag fa-2x"></i></div>
            <h5>Wszystkie Zakupy</h5>
            <h3 class="text-white"><%= stats.totalPurchases %></h3>
          </div>
        </div>
        <div class="col-md-3">
          <div class="stat-card p-3 text-center">
            <div class="text-success mb-2"><i class="fas fa-check-circle fa-2x"></i></div>
            <h5>Zakończone</h5>
            <h3 class="text-white"><%= stats.completedPurchases %></h3>
          </div>
        </div>
        <div class="col-md-3">
          <div class="stat-card p-3 text-center">
            <div class="text-warning mb-2"><i class="fas fa-clock fa-2x"></i></div>
            <h5>Oczekujące</h5>
            <h3 class="text-white"><%= stats.pendingPurchases %></h3>
          </div>
        </div>
        <div class="col-md-3">
          <div class="stat-card p-3 text-center">
            <div class="text-info mb-2"><i class="fas fa-coins fa-2x"></i></div>
            <h5>Łączne Przychody</h5>
            <h3 class="text-white"><%= stats.totalRevenue.toFixed(2) %> PLN</h3>
          </div>
        </div>
      </div>

      <!-- Top Servers by Revenue -->
      <div class="card border-0 shadow-sm mb-4">
        <div class="card-header bg-dark-2 border-0">
          <h3 class="h5 mb-0"><i class="fas fa-trophy me-2"></i>Top Serwery według Przychodów</h3>
        </div>
        <div class="card-body">
          <div class="row">
            <% stats.topServers.forEach((shop, index) => { %>
              <% const server = servers.find(s => s.serverID === shop.serverID) %>
              <div class="col-md-4 mb-2">
                <div class="d-flex align-items-center">
                  <span class="badge bg-primary me-2"><%= index + 1 %></span>
                  <div class="flex-grow-1">
                    <div class="fw-bold"><%= server?.serverName || 'Nieznany serwer' %></div>
                    <small class="text-muted"><%= (shop.totalRevenue || 0).toFixed(2) %> PLN</small>
                  </div>
                </div>
              </div>
            <% }) %>
          </div>
        </div>
      </div>

      <!-- Purchases Table -->
      <div class="card border-0 shadow-sm">
        <div class="card-header bg-dark-2 border-0">
          <h3 class="h5 mb-0"><i class="fas fa-list me-2"></i>Ostatnie Zakupy</h3>
        </div>
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table table-dark table-hover mb-0">
              <thead class="bg-dark-3">
                <tr>
                  <th>Data</th>
                  <th>Serwer</th>
                  <th>Kupujący</th>
                  <th>Przedmiot</th>
                  <th>Cena</th>
                  <th>Status</th>
                  <th>Rola</th>
                  <th>Przychody Serwera</th>
                  <th>Akcje</th>
                </tr>
              </thead>
              <tbody>
                <% purchases.forEach(purchase => { %>
                <tr>
                  <td>
                    <small><%= new Date(purchase.purchaseDate).toLocaleString('pl-PL') %></small>
                  </td>
                  <td>
                    <div>
                      <div class="fw-bold"><%= purchase.serverName %></div>
                      <small class="text-muted d-block">ID: <%= purchase.serverID %></small>
                      <small class="text-muted">
                        <span class="badge bg-faded-<%= purchase.serverStatus === 'GOLD' ? 'warning' : purchase.serverStatus === 'PRO' ? 'info' : purchase.serverStatus === 'BASIC' ? 'success' : 'secondary' %>">
                          <%= purchase.serverStatus %>
                        </span>
                      </small>
                    </div>
                  </td>
                  <td>
                    <div>
                      <div class="fw-bold"><%= purchase.buyerUsername %></div>
                      <small class="text-muted"><%= purchase.buyerID %></small>
                    </div>
                  </td>
                  <td>
                    <div>
                      <div class="fw-bold"><%= purchase.itemName %></div>
                      <small class="text-muted">ID: <%= purchase.itemId %></small>
                    </div>
                  </td>
                  <td class="fw-bold"><%= purchase.price.toFixed(2) %> PLN</td>
                  <td>
                    <span class="status-badge status-<%= purchase.status %>">
                      <% if (purchase.status === 'completed') { %>
                        <i class="fas fa-check me-1"></i>Zakończony
                      <% } else if (purchase.status === 'pending') { %>
                        <i class="fas fa-clock me-1"></i>Oczekujący
                      <% } else if (purchase.status === 'failed') { %>
                        <i class="fas fa-times me-1"></i>Nieudany
                      <% } else { %>
                        <i class="fas fa-ban me-1"></i>Anulowany
                      <% } %>
                    </span>
                    <% if (purchase.errorMessage) { %>
                      <div class="mt-1">
                        <small class="text-danger"><%= purchase.errorMessage %></small>
                      </div>
                    <% } %>
                  </td>
                  <td>
                    <% if (purchase.roleGranted) { %>
                      <span class="text-success"><i class="fas fa-check-circle"></i> Przyznana</span>
                    <% } else { %>
                      <span class="text-warning"><i class="fas fa-exclamation-triangle"></i> Nie przyznana</span>
                    <% } %>
                  </td>
                  <td>
                    <input type="number" 
                           class="revenue-input" 
                           value="<%= purchase.totalRevenue.toFixed(2) %>" 
                           data-server-id="<%= purchase.serverID %>"
                           step="0.01" 
                           min="0">
                    <button class="action-btn btn-success ms-2" onclick="updateRevenue('<%= purchase.serverID %>')">
                      <i class="fas fa-save"></i>
                    </button>
                  </td>
                  <td>
                    <div class="btn-group-vertical btn-group-sm">
                      <button class="action-btn btn-success" onclick="updateStatus('<%= purchase._id %>', 'completed')">
                        <i class="fas fa-check"></i> Zakończ
                      </button>
                      <button class="action-btn btn-warning" onclick="updateStatus('<%= purchase._id %>', 'pending')">
                        <i class="fas fa-clock"></i> Oczekuj
                      </button>
                      <button class="action-btn btn-danger" onclick="updateStatus('<%= purchase._id %>', 'failed')">
                        <i class="fas fa-times"></i> Niepowodzenie
                      </button>
                      <button class="action-btn btn-secondary" onclick="updateStatus('<%= purchase._id %>', 'cancelled')">
                        <i class="fas fa-ban"></i> Anuluj
                      </button>
                    </div>
                  </td>
                </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    async function updateStatus(purchaseId, status) {
      try {
        const response = await fetch(`/dashboard/shop/purchase/${purchaseId}/status`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ status })
        });

        const result = await response.json();
        
        if (result.success) {
          location.reload();
        } else {
          alert('Błąd: ' + result.message);
        }
      } catch (error) {
        alert('Wystąpił błąd podczas aktualizacji statusu');
        console.error(error);
      }
    }

    async function updateRevenue(serverID) {
      const input = document.querySelector(`input[data-server-id="${serverID}"]`);
      const revenue = parseFloat(input.value);
      
      if (isNaN(revenue) || revenue < 0) {
        alert('Podaj prawidłową kwotę przychodów');
        return;
      }

      try {
        const response = await fetch(`/dashboard/shop/server/${serverID}/revenue`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ revenue })
        });

        const result = await response.json();
        
        if (result.success) {
          alert('Przychody zostały zaktualizowane');
        } else {
          alert('Błąd: ' + result.message);
        }
      } catch (error) {
        alert('Wystąpił błąd podczas aktualizacji przychodów');
        console.error(error);
      }
    }
  </script>
</body>
</html>
